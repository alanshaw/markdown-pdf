#!/usr/bin/env node

var markdownpdf = require('../')
var program = require('commander')
var path = require('path');
var fs = require('fs');
var async = require('async');

program.version(require('../package.json').version)
  .usage('[options] <markdown-file-path> ...>')
  .option('<markdown-file-path>', 'Paths of the markdown files to convert')
  .option('-c, --cwd [path]', 'Current working directory')
  .option('-p, --phantom-path [path]', 'Path to phantom binary')
  .option('-h, --runnings-path [path]', 'Path to runnings (header, footer)')
  .option('-s, --css-path [path]', 'Path to custom CSS file')
  .option('-z, --highlight-css-path [path]', 'Path to custom highlight-CSS file')
  .option('-m, --remarkable-options [json-options]', 'Options to pass to remarkable')
  .option('-f, --paper-format [format]', '"A3", "A4", "A5", "Legal", "Letter" or "Tabloid"')
  .option('-r, --paper-orientation [orientation]', '"portrait" or "landscape"')
  .option('-b, --paper-border [measurement]', 'Supported dimension units are: "mm", "cm", "in", "px"')
  .option('-d, --render-delay [millis]', 'Delay before rendering the PDF')
  .option('-t, --load-timeout [millis]', 'Timeout before the page is rendered in case `page.onLoadFinished` isn\'t fired')
  .option('-o, --out [path]', 'Directory to save output PDFs')
  .parse(process.argv)

var inputFileNames = program.args;

if (inputFileNames.length === 0) program.help()

var opts = {
  cwd: program.cwd,
  phantomPath: program.phantomPath,
  runningsPath: program.runningsPath,
  cssPath: program.cssPath,
  highlightCssPath: program.highlightCssPath,
  remarkable: program.remarkableOptions ? JSON.parse(program.remarkableOptions) : null,
  paperFormat: program.paperFormat,
  paperOrientation: program.paperOrientation,
  paperBorder: program.paperBorder,
  renderDelay: program.renderDelay,
  loadTimeout: program.loadTimeout
}

async.each(inputFileNames, generateFromFile)

function generateFromFile (inputPath) {
  var inputPathAsPdf = inputPath.replace(/\.m(ark)?d(own)?/gi, '') + '.pdf'
  var outputPath = program.out
    ? path.join(program.out, path.basename(inputPathAsPdf))
    : inputPathAsPdf

  fs.createReadStream(inputPath)
    .pipe(markdownpdf(opts))
    .pipe(fs.createWriteStream(outputPath))
}
